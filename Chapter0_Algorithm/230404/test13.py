"""
올바른 괄호란 (())나 ()와 같이 올바르게 모두 닫힌 괄호를 의미합니다.
)(나 ())() 와 같은 괄호는 올바르지 않은 괄호가 됩니다.
괄호 쌍의 개수 n이 주어질 때,
n개의 괄호 쌍으로 만들 수 있는 모든 가능한 괄호 문자열의 갯수를 반환하는 함수 solution을 완성해 주세요.

제한사항
괄호 쌍의 개수 N : 1 ≤ n ≤ 14, N은 정수

1   [()]        -> 1
2   [()()]      -> 2
3   [()()()]    -> 5
4   [()()()()]  -> 12
1단계. 왼쪽 끝 한 쌍의 괄호 () 안에는 없고, 오른쪽에 괄호 3쌍 두기
() {3쌍의 괄호}   = 경우의 수 C0*C3

2단계. 왼쪽 끝 한 쌍의 괄호 () 안에 1쌍의 괄호를 넣고, 오른쪽에 2쌍 두기
({1쌍의 괄호}) {2쌍의 괄호}   = 경우의 수 C1*C2

3단계. 왼쪽 끝 한 쌍의 괄호 () 안에 2쌍의 괄호를 넣고, 오른쪽에 1쌍 두기
({2쌍의 괄호}) {1쌍의 괄호} = 경우의 수 C2*C1

4단계. 왼쪽 끝 한 쌍의 괄호 () 안에 3쌍의 괄호를 넣고, 오른쪽에 0쌍 두기
({3쌍의 괄호})  = 경우의 수 C3*C0
(((())))
(()()())
(()(()))
((())())
(())(())

()(()())
((()))()
()((()))
()()(())
()(())()
(())()()
()()()()
(()())()
"""

def solution(n):
    answer = 0
    dp = [0 for _ in range(n+1)]
    dp[0], dp[1] = 1, 1
    for i in range(2, n+1) :
        for j in range(1, i+1) :
            print(f"i : {i}, j : {j}")
            print(f"dp[{i}] = dp[{i-j}] : {dp[i-j]} dp[{j-1}] : {dp[j-1]}")
            dp[i]+=dp[i-j]*dp[j-1]

    print(dp)
    return dp[n]

print(solution(1))
print(solution(2))
print(solution(3))
print(solution(4))
print(solution(5))